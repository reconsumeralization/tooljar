# Sweep Configuration File

# Name for the issue template
name: "Sweep Configuration Issue"

# Rules for TypeScript best practices
rules:
  - "All docstrings and comments should be up to date."
  - "All new business logic should have corresponding unit tests."
  - "Refactor large functions to be more modular."
  - "Add docstrings to all functions and file headers."
  - "Use type annotations for variables, function parameters, and return types."
  - "Define complex data structures using interfaces or type aliases."
  - "Embrace object-oriented programming (OOP) principles using classes, inheritance, and encapsulation."
  - "Represent related constants with enums to ensure type safety and improve code maintainability."
  - "Take advantage of TypeScript's async/await syntax for asynchronous operations."
  - "Ensure proper error handling in asynchronous functions for robust error detection and handling."
  - "Use generics to create reusable and type-safe components, functions, and classes."
  - "Explore decorators for adding metadata or behavior to classes and class members, especially in frameworks like Angular."
  - "Follow established TypeScript conventions in your codebase for consistency."
  - "Use tools like TSLint or ESLint with the TypeScript plugin to enforce coding standards."
  - "Document any deviations from conventions to maintain a transparent codebase."
  - "We should use loguru for error logging. If the log is inside an exception, use loguru.exception to add tracebacks. Use f-strings for string formatting in logger calls."
  - "There should be no debug log or print statements in production code."
  - "All functions should have parameters and output annotated with type hints. Use list, tuple, and dict instead of typing.List, typing.Tuple, and typing.Dict."
  - "Leftover TODOs in the code should be handled."
  - "All new business logic should have corresponding unit tests in the same directory. For example, sweepai/api_test.py tests sweepai/api.py. Use unittest and unittest.mock as required."
  - "Any clearly inefficient or repeated code should be optimized or refactored."
  - "Remove any comments before code that are obvious. For example `# this prints hello world; print('hello world')`."

# Additional settings
settings:
  # Specify TypeScript version for the project
  typescript_version: '4.5.2'

  # Specify the main folder for TypeScript files
  main_ts_folder: 'src'

  # Specify code generation hints
  code_generation:
    - 'model: Pepe'

  # Specify documentation sources
  docs_sources:
    - 'modal'
    - 'GitHub'
    - 'deep-lake'

  # Enable GitHub Actions integration
  gha_enabled: True

  # Specify the main branch
  branch: 'main'

  # Specify blocked directories
  blocked_dirs:
    - 'tests'

  # Specify project details for description
  description: "sweepai/sweep is a python 3.10 project. The main api endpoints are in sweepai/api.py. All imports should be global (like `import sweepai.utils.github_utils`). Write unit tests in the same directory as their corresponding code, i.e. sweepai/api_test.py tests sweepai/api.py. We use pytest for tests. Never use wildcard imports. Use list and tuple for typing instead of typing.List and typing.Tuple."

  # Specify documentation for external packages
  docs:
    github:
      - "https://pygithub.readthedocs.io/en/stable"
      - "We use github to perform actions with Sweep."
    deeplake:
      - "https://docs.deeplake.ai/en/latest"
      - "We use deeplake as our vector database."

  # Sandbox settings for installation and checks
  sandbox:
    install:
      - pre-commit install
      - pre-commit run --file sweepai/api.py || exit 0
      - pip install poetry
      - poetry install
      - poetry run pip install torch --index-url https://download.pytorch.org/whl/cpu
      - trunk init
    check:
      - trunk check --fix --filter=-ruff --print-failures {file_path}
      - git add . && pre-commit run --files {file_path} || exit 0
      - 'if [[ "{file_path}" == *.py ]]; then PYTHONPATH=. poetry run pylint --errors-only {file_path}; else exit 0; fi'
      - 'if [[ "{file_path}" == *.py ]]; then PYTHONPATH=. poetry run python {file_path}; else exit 0; fi'
